// strcat(temp, "\nexit\n");	
			// printf("TEMP: %s\n", temp);

			// int default_in = dup(0);
			// int default_out = dup(1);

			// int fstdin = fileno(stdin);
			// int fstdout = fileno(stdout);

			int parentShellPipe[2];
			int childShellPipe[2];

			pipe(parentShellPipe);
			pipe(childShellPipe);
			
			// dup2(parentShellPipe[0], 0);
			// close(parentShellPipe[0]);

			// dup2(childShellPipe[1], 1);	
			// close(childShellPipe[1]);		
		
			pid_t pid = fork();
			char *arguments[2];

			arguments[0] = strdup("./shell\n");
			arguments[1] = NULL;

			int maxBuffSize = 1024;
			char *maxBuffArray = (char *)calloc(maxBuffSize, sizeof(char));

			if( pid == 0 )
			{	
				// Child process	
				printf("In child process forking\n");	

				dup2(parentShellPipe[1], 1);
				close(parentShellPipe[0]);	
				close(parentShellPipe[1]);	

				dup2(childShellPipe[0], 0);
				close(childShellPipe[0]);
				close(childShellPipe[1]);

				execvp(arguments[0], arguments);
				perror("execvp error\n");
				_exit(1);
			}
			
			else if( pid < 0 )
			{
				// Fork error.				
				perror("Fork failed\n");
				exit(1);
			}
			else
			{
				// Parent process
				
				// for( int i = 0; i < strlen(temp); i++ )
				//	write(childShellPipe[1], &temp[i], 1);
		
				write(childShellPipe[1], temp, strlen(temp));
				write(childShellPipe[1], "\n", 1);

				char *exit_e = strdup("exit");
				write(childShellPipe[1], exit_e, strlen(exit_e));
				write(childShellPipe[1], "\n", 1);

				// for( int i = 0; i < strlen(exit_e); i++ )
				//	write(1, &exit_e[i], 1);

				// write(1, "\n", 1);

				// dup2(default_out, 1);
				// close(default_out);

				// close(parentShellPipe[0]);				
				// close(parentShellPipe[1]);			
				// close(childShellPipe[0]);
				// close(childShellPipe[1]);
				
				close(childShellPipe[1]);			

				printf("Back from child process forking\n");
				
				char ch;
				int i = 0;
				while( read(0, &ch, 1) != 0 )
				{				
					maxBuffArray[i] = ch;
					i++;
					if( i == maxBuffSize )
					{
						maxBuffSize *= 2;
						maxBuffArray = (char *)realloc(maxBuffArray, maxBuffSize*sizeof(char));
						assert(maxBuffArray != NULL);
					}
				}

				maxBuffArray[i] = '\0';
				
				// dup2(default_in, 0);
				// close(default_in);

				//dup2(default_out, 1);
				
				// close(default_in);
				// close(default_out);


				// close(parentShellPipe[0]);				
				// close(parentShellPipe[1]);			
				// close(childShellPipe[0]);
				// close(childShellPipe[1]);

			}
			
			waitpid(pid, NULL,0);
			// while( waitpid( -1, NULL, WNOHANG) > 0 );

			int len = strlen(maxBuffArray);

			for( int i = 0; i < len; i++ )
				myunputc(maxBuffArray[len - 1 - i]);
